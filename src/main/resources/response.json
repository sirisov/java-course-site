{"jc_7":{"10.97.24.20":"package ale.java_training.classes;\n\nimport java.util.Arrays;\n\npublic class FancyRobot implements Robot {\n\t\n\tprivate Command[] commands \u003d new Command[0];\n\t\n\tpublic static enum Movement {\n\t\tLEFT(\"\u003c-- d[(0)(0)]b\"),\n        RIGHT(\"d[(0)(0)]b --\u003e\"),\n        DOWN(\"/[(0)(0)]\\\\\"),\n        UP(\"\\\\[(0)(0)]/\");\n             \n        private final String move;\n      \n      \tMovement(String move) {\n          this.move \u003d move;\n        }\n      \n\t}\n  \n \t@Override\n    public void queueCommand(Command command) {\n        commands \u003d Arrays.copyOf(this.commands, commands.length + 1);\n        commands[commands.length - 1] \u003d command;\n    }\n\n    @Override\n    public void execute() {\n      for (Command cmd : commands) {\n      \tcmd.doIt();\n      }\n      commands \u003d new Command[0];\n    }\n  \n  \t@Override\n    public void execute(int n) {\n      for (int i \u003d 0; i \u003c n \u0026\u0026 i \u003c commands.length; i++) {\n        commands[i].doIt();\n      }\n      commands \u003d Arrays.copyOfRange(this.commands, Math.min(n, commands.length), commands.length);\n    }\n\t\n\tpublic static class Commands {\n\t\tpublic static Command sing(String song) {\n          return new Command() {\n            @Override\n            public void doIt() {\n            \tSystem.out.println(song);\n          \t}\n          };\n        }\n      \n      \tpublic static Command dance(Movement movement) {\n          return sing(movement.move);\n        }\n      \n      \tpublic static Command work() {\n          return sing(\"Ja tvoi rabotnik\");\n        }\n      \n      \tpublic static Command serve() {\n          return sing(\"Ja tvoi sluga\");\n        }\n      \n\t}\n}"},"jb_7":{"10.97.20.79":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n    public static String findAccountByPiece(String[] accounts, String cardPiece) {\n      String accountWithCardPiece \u003d \"\";\n      for (String account: accounts){\n        if (account.indexOf(cardPiece) !\u003d -1)\n\t\t\taccountWithCardPiece \u003d account;\n        if (!accountWithCardPiece.equals(\"\")) \n            break;\n      }\n      return accountWithCardPiece;\n    }\n}","10.97.24.20":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n    public static String findAccountByPiece(String[] accounts, String cardPiece) {\n        for (String account: accounts) {\n          if (account.contains(cardPiece)) {\n            return account;\n          }\n        }\n      \tthrow new IllegalStateException(\"Can\u0027t find account\");\n    }\n}\n","10.97.20.62":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n    public static String findAccountByPiece(String[] accounts, String cardPiece) {\n        // if piece is \"40392\" and list is [\"13049523\", \"4912095\", \"94919571\", \"64039217\", \"31920168\"]. shoud return \"64039217\"\n              // if piece is \"40392\" and list is\n        for(String i: accounts){\n            System.out.print(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");\n            System.out.print(\"account \u003d \" + i + \"\\n\");\n            for(int j \u003d 0; j \u003c\u003d i.length() - cardPiece.length(); ++j) {\n                String tmp \u003d i.substring(j, j + cardPiece.length());\n                boolean res \u003d cardPiece.equals(tmp);\n                System.out.print(\"substring \u003d \" + tmp + ((res) ? \" equals \": \" not equals \") + cardPiece + \"\\n\");\n                if (res)\n                    return i;\n            }\n        }\n        return \"\";\n    }\n}\n","10.97.20.129":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n    public static String findAccountByPiece(String[] accounts, String cardPiece) {\n        String fAccount  \u003d new String();\n        for (String acc: accounts) {\n            if (acc.indexOf(cardPiece) !\u003d -1) {\n                fAccount \u003d acc;\n                break;\n            }\n        }\n        return fAccount;\n    }\n}\n","10.97.20.135":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n    public static String findAccountByPiece(String[] accounts, String cardPiece) {\n        // if piece is \"40392\" and list is [\"13049523\", \"4912095\", \"94919571\", \"64039217\", \"31920168\"]. shoud return \"64039217\"\n      for(String account : accounts) {\n      \tif (account.contains(cardPiece)) {\n          return account;\n        }             \n      }\n      \n      return null;\n    }\n}\n","10.97.24.17":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n    public static String findAccountByPiece(String[] accounts, String cardPiece) {\n        // if piece is \"40392\" and list is [\"13049523\", \"4912095\", \"94919571\", \"64039217\", \"31920168\"]. shoud return \"64039217\"\n      String firstAcc \u003d \"\";\n      String substr;\n      boolean found \u003d false;\n      int cardPieceLenght\u003d cardPiece.length();\n      System.out.println(\"cardPiece \u003d \" + cardPiece);\n      for (String account:accounts) {\n        if (account.contains(cardPiece)){\n          firstAcc \u003d account;\n          break;\n        }\n      }\n      if (firstAcc \u003d\u003d \"\"){\n        System.out.println(\"Nothing is found\");\n      }\n      else {\n        System.out.println(\"firstAccount \u003d \" + firstAcc);\n      }\n      return firstAcc;\n    }\n}","10.97.20.139":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n  public static String findAccountByPiece(String[] accounts, String cardPiece) {\n\n\n        String account \u003d \"\" ;\n        for (int i \u003d 0; i \u003c accounts.length; i++) {\n            if (accounts[i].contains(cardPiece)){\n\n                account \u003d accounts[i];\n                System.out.println(accounts[i] + \" is found\");\n                return account;\n            }\n        }\n        \n        System.out.println(account);\n        return account;\n\n\n    }\n}\n","10.97.24.22":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n    public static String findAccountByPiece(String[] accounts, String cardPiece) {\n        // if piece is \"40392\" and list is [\"13049523\", \"4912095\", \"94919571\", \"64039217\", \"31920168\"]. shoud return \"64039217\" \n     for (String account : accounts) {\n       if (account.contains(cardPiece)) {\n         return account;\n        }\n     }  \n      return \"\";\n    }  \n}\n"},"jb_2":{"0:0:0:0:0:0:0:1":"package ale.java_training;\nimport java.util.Random;\n\npublic class LogShuffler {\n\n    public static void shuffle(String... logs) {\n      // your shuffle code goes here\n      Random random \u003d new Random();\n      for (int i\u003dlogs.length - 1; i \u003e\u003d 0; i--) {\n        \n        int randomIndex \u003d random.nextInt(i+1);\n\n        String tmpStr \u003d logs[i];\n        logs[i] \u003d logs[randomIndex];\n        logs[randomIndex] \u003d tmpStr;\n      }\n    }\n}\n","10.97.24.20":"package ale.java_training;\nimport java.util.Random;\n\npublic class LogShuffler {\n    \n    public static void shuffle(String... logs) {\n      Random random \u003d new Random();\n      for (int i\u003dlogs.length - 1; i \u003e\u003d 0; i--) {\n        int randomIndex \u003d random.nextInt(i+1);\n\n        String tmpStr \u003d logs[i];\n        logs[i] \u003d logs[randomIndex];\n        logs[randomIndex] \u003d tmpStr;\n      }\n    }\n}","10.97.20.79":"package ale.java_training;\nimport java.util.Random;\n\npublic class LogShuffler {\n    \n    public static void shuffle(String... logs) {\n      for (int i\u003dlogs.length - 1; i \u003e\u003d 0; i--) {\n        Random random \u003d new Random();\n        int randomIndex \u003d random.nextInt(i+1);\n        \n          String tmpStr \u003d logs[i];\n          logs[i] \u003d logs[randomIndex];\n          logs[randomIndex] \u003d tmpStr;\n      }\n    }\n}","10.97.20.135":"package ale.java_training;\n\npublic class LogShuffler {\n    \n    public static void shuffle(String... logs) {\n        String helper \u003d new String();\n        for (int i \u003d 0; i \u003c logs.length - 1; i++){\n         int random \u003d (int)(Math.random() * i +1);\n         helper \u003d logs[i];\n         logs[i] \u003d logs[random];\n         logs[random] \u003d helper; \n         }   \n    }\n}","10.97.20.62":"package ale.java_training;\n\npublic class LogShuffler {\n    \n    public static void shuffle(String... logs) {\n        // your shuffle code goes here\n        java.util.Random random \u003d new java.util.Random();\n        for(int i \u003d logs.length-1; i \u003e 0; --i) {\n            int j \u003d random.nextInt(i);\n            String tmp \u003d logs[j];\n            logs[j] \u003d logs[i];\n            logs[i] \u003d tmp;\n        }\n    }\n}","10.97.24.17":"package ale.java_training;\nimport java.util.Random;\n\npublic class LogShuffler {\n    \n    public static void shuffle(String... logs) {\n        // your shuffle code goes here\n        int i \u003d logs.length-1;\n    \tint j;\n    \tString s;\n    \tRandom random;\n    \twhile (i \u003e 1) {\n      \t\trandom \u003d new Random();\n      \t\tj \u003d random.nextInt(i);\n      \t\ts \u003d logs[i];\n      \t\tlogs[i] \u003d logs[j];\n      \t\tlogs[j] \u003d s;\n      \t\ti--;\n    \t\t}\n    \tSystem.out.println(\"Result array\");\n\t    for (String str:logs){\n      \t\tSystem.out.print(str + \" \");\n    \t}\n\t\tSystem.out.println(\" \");\n    }\n}","10.97.20.10":"package ale.java_training;\n\nimport java.util.Random;\n\npublic class LogShuffler {\n    \n  public static void shuffle(String[] logs) {\n        Random random \u003d new Random();\n\n        int logLength \u003d logs.length;\n\n        for (int i\u003dlogLength-1; i\u003e0; i--){\n            int r \u003d random.nextInt(logLength);\n            String temp \u003d logs[i];\n            logs[i]\u003dlogs[r];\n            logs[r]\u003dtemp;\n        }\n    System.out.println(\"Array Shuffle finished!\");\n        for(int i\u003d0; i\u003clogs.length; i++){\n            System.out.println(logs[i].toString());\n        }\n    }\n}","10.97.20.129":"package ale.java_training;\nimport java.util.Random;\n\npublic class LogShuffler {\n    \n    public static void shuffle(String... logs) {\n        Random random \u003d new Random();\n        String tmp \u003d new String();\n        for (int i \u003d 0; i\u003clogs.length; i++) {\n            int j \u003d random.nextInt(i+1);\n            tmp \u003d logs[i];\n            logs[i] \u003d logs[j];\n            logs[j] \u003d tmp;\n        }\n\n    }\n}"},"jc_1":{"10.97.24.22":"package ale.java_training.classes;\n\npublic interface Named {\n\t\n\tString getName();\n\t\n\tpublic static Named create(String name) {\n\t\treturn new SimpleNamed(name);\n\t}\n\t\n\tpublic static class SimpleNamed implements Named {\n\t\t//here you go\n      \n      final private String name;\n      \n      public SimpleNamed(String name) {\n        this.name \u003d name;\n      }\n      \n      @Override \n      public String getName() {\n        return this.name;\n      } \n\t}\n\t\n}\n","127.0.0.1":"package ale.java_training.classes;\n\npublic class SimpleNamed implements Named {\n\t\t\n  private final String name;\n      \t\n  public SimpleNamed(String name) {\n    this.name \u003d name;\n  }\n\n  @Override\n  public String getName() {\n    return name;\n  }\n}\n"},"jb_1":{"0:0:0:0:0:0:0:1":"package ale.java_training;\n\nimport java.util.Arrays;\n\npublic class HackUtils {\n    \n    public static int countHackable(Boolean[] hackable) {\n        int count \u003d 0 ;\n      for (boolean hackObj:hackable){\n        if (hackObj) {\n          count+\u003d1;\n        }\n    }\n      System.out.println(Arrays.toString(hackable));\n      return count;\n    }\n}","10.97.24.20":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int countHackable(Boolean[] hackable) {\n      int count \u003d 0;\n      for (boolean obj: hackable) {\n        if (obj) {\n          count++;\n        }\n      }\n      return count;\n    }\n}","10.97.20.79":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int countHackable(Boolean[] hackable) {\n      int count \u003d 0;\n      for (int i\u003d0; i\u003chackable.length; i++)\n      {\n        if (hackable[i])\n          count++;\n      }\n      return count;\n    }\n}","10.97.20.129":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int countHackable (Boolean[] hackable) {\n        int cHackable \u003d 0;\n        for (boolean i: hackable) {\n            if (i\u003d\u003d true) {\n                cHackable+\u003d1;\n            }\n        }\n        return cHackable;\n    }\n}","10.97.20.62":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int countHackable(Boolean[] hackable) {\n        // return count\n      int count \u003d 0;\n      for(boolean i: hackable){\n        System.out.print(\"hackable \u003d \" + i + \"\\n\");\n        if(i) count++;\n      } \n      System.out.print(\"count \u003d \" + count + \"\\n\");\n      return count;\n    }\n}","10.97.20.31":"package ale.java_training;\n\npublic class HackUtils {\n    \n  Boolean hackable [] \u003d {true,false,false,false,true,true,false,true,false,true};  \n  \n  public static int countHackable(Boolean[] hackable) {\n    \n    int count \u003d 0;\n    for (int i\u003d0; i\u003c\u003d(hackable.length-1); i++) {\n    if ((hackable[i]) \u003d\u003d true) {\n\n         count ++;\n    }\n    }\n      return count;\n    \n    }\n}","10.97.20.139":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int countHackable(Boolean[] hackable) {\n        int count \u003d 0;\n\n        for (int i \u003d 0; i \u003c hackable.length; i++) {\n            if (hackable[i]) {\n                count \u003d count + 1;\n            }\n        }\n        System.out.println(count + \" times are hacked\");\n        return count;\n    }\n}","10.97.24.22":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int countHackable(Boolean[] hackable) {\n      int j \u003d 0;\n     for (int i \u003d 0; i \u003c hackable.length; i++) {\n       if (hackable[i]) {\n          j ++;\n        }\n     }  \n      return j;\n    }\n}\n","10.97.24.17":"package ale.java_training;\n\npublic class HackUtils {\n    \n  public static int countHackable(Boolean[] hackable) {\n    // return count\n    int count \u003d 0;\n    for (boolean hackObj: hackable){\n      if (hackObj) {\n        count++;\n      }\n    }\n    System.out.println(count);\n    return count;\n  }\n}","10.97.20.10":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int countHackable(Boolean[] hackable) {\n        int hackLength \u003d hackable.length;\n        int count \u003d 0;\n        for (int i\u003d0; i\u003chackLength; i++) {\n            if (hackable[i]){\n                count +\u003d 1;\n            }\n        }\n        System.out.println(\"We found \" + count + \" hackables\");\n        return count;\n        \n    }\n}","10.97.20.135":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int countHackable(Boolean[] hackable) {\n        int count \u003d 0;\n        for (int i \u003d 0; i \u003c hackable.length; i++){\n            if (hackable[i]) {count +\u003d 1;};\n        }\n        return count;\n    }\n}","10.97.20.128":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int countHackable(Boolean[] hackable) {\n      int sum\u003d0;\n      for (int i\u003d0; i\u003chackable.length; i++) {\n       if (hackable[i]) {\n         sum+\u003d1;\n      }\n\t}\n     return sum;\n  }\n}"},"jb_4":{"10.97.20.79":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int profitOf(int[] accounts, int first, int last) {\n      int sum \u003d 0;\n      for (int i \u003d first; i\u003c\u003dlast; i++) {\n        sum +\u003d accounts[i];\n      }\n      return sum;\n    }\n}","10.97.24.20":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int profitOf(int[] accounts, int first, int last) {\n      int sum \u003d 0;\n      for (int i \u003d first; i \u003c\u003d last; i++) {\n        sum +\u003d accounts[i];\n      }\n      return sum;\n    }\n}","10.97.20.62":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int profitOf(int[] accounts, int first, int last) {\n      // calc the sum of hacking accounts\n      int sum \u003d 0;\n      for(int i \u003d first; i \u003c\u003d last; ++i){\n        sum +\u003d accounts[i];\n      }\n      return sum;\n    }\n}","10.97.20.135":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int profitOf(int[] accounts, int first, int last) {\n      int sum \u003d 0;\n      for (int i \u003d first; i \u003c\u003d last; i++){\n        sum +\u003d accounts[i];\n      }  \n      return sum;\n    }\n}","10.97.20.129":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int profitOf(int[] accounts, int first, int last) {\n           int Sum \u003d 0;\n           for (int i\u003dfirst; i\u003c\u003dlast; i++) {\n               Sum \u003d Sum+accounts[i];\n           }\n           return Sum;\n       }\n}","10.97.20.139":"package ale.java_training;\n\npublic class HackUtils {\n    \n   public static int profitOf(int[] accounts, int first, int last) {\n    // calc the sum of hacking accounts\n    int sum \u003d 0;\n\n    if (last \u003e\u003d first) {\n\n        for (int i \u003d first; i \u003c\u003d last; i++) {\n\n            sum \u003d sum + accounts[i];\n          \n        }\n    }\n\n    if (last \u003c first){\n\n      sum \u003d0;\n      System.out.println(\"wrong indexes, try again\" + sum);\n\n    }\n    System.out.println(\"sum is \" + sum);\n    return sum;\n\n}\n\n}","10.97.24.17":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int profitOf(int[] accounts, int first, int last) {\n      // calc the sum of hacking accounts\n      int profit \u003d 0;\n      if (last \u003c\u003d accounts.length){\n        for ( int i\u003dfirst; i \u003c\u003d last; i++ ){\n          profit +\u003d accounts[i];\n        }\n      }\n      System.out.println(profit);\n      return profit;\n    }\n}","10.97.24.22":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int profitOf(int[] accounts, int first, int last) {\n      int sum \u003d 0;\n      for (int i \u003d first; i \u003c last + 1; i++) {\n        sum +\u003d accounts[i];\n      }\n      return sum;\n    }\n}","10.97.20.10":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int profitOf(int[] accounts, int first, int last) {\n      int sum \u003d 0;\n        for (int i\u003dfirst; i\u003c\u003dlast; i++){\n            sum +\u003daccounts[i];\n        }\n        System.out.println(sum);\n        return sum;\n    }\n}"},"jc_3":{"10.97.24.22":"package ale.java_training.classes;\n// your class goes here\n\npublic class T1000 extends T800 {\n  \n //public final boolean smile;\n  \n  public T1000() {\n    this.smile \u003d false;\n  }\n  \n   @Override\n  public void setSmile(boolean Smile) { \n    this.smile \u003d false;\n  }\n\n  public T1000 restore() {\n    return new T1000();\n  } \n}\n","127.0.0.1":"package ale.java_training.classes;\npublic class T1000 extends T800 {\n  \n  public T1000() {\n    smile \u003d false;\n  }\n  \n  @Override\n  public void setSmile(boolean smile) {\n  }\n  \n  public T1000 restore() {\n    return this;\n  }\n  \n}\n"},"jb_3":{"10.97.20.79":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n    public static int richest(int[] accounts) {\n      int richestAccount \u003d Integer.MIN_VALUE;\n\t  \n      if (accounts.length !\u003d 0) {\n        richestAccount \u003d accounts[0];\n        for (int i\u003d0; i\u003caccounts.length; i++) {\n          if (accounts[i] \u003e richestAccount){\n            richestAccount \u003d accounts[i];\n          }\n        }\n      }\n      return richestAccount;\n    }\n\n    public static int poorest(int[] accounts) {\n      int poorestAccount \u003d Integer.MAX_VALUE;\n\t  \n      if (accounts.length !\u003d 0) {\n        poorestAccount \u003d accounts[0];\n        for (int i\u003d0; i\u003caccounts.length; i++) {\n          if (accounts[i] \u003c poorestAccount){\n            poorestAccount \u003d accounts[i];\n          }\n        }\n      }\n      return poorestAccount;\n    }\n}","10.97.24.20":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n    public static int richest(int[] accounts) {\n      int max \u003d Integer.MIN_VALUE;\n      for (int acc: accounts) {\n        max \u003d acc \u003e max ? acc : max;\n      }\n      return max;\n    }\n\n    public static int poorest(int[] accounts) {\n      int min \u003d Integer.MAX_VALUE;\n      for (int acc: accounts) {\n        min \u003d acc \u003c min ? acc : min;\n      }\n      return min;\n    }\n}","10.97.20.129":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n    public static int richest(int[] accounts) {\n        int maxvalue \u003d 0;\n        if (accounts.length \u003d\u003d 0) {\n            maxvalue \u003d Integer.MIN_VALUE;\n        } else  maxvalue \u003d accounts[0];\n        for (int i \u003d0; i\u003caccounts.length; i++) {\n            if (accounts[i]\u003emaxvalue) {\n                maxvalue \u003d accounts[i];\n            }\n        }\n        return maxvalue;\n    }\n    public static int poorest (int[] accounts) {\n        int minvalue \u003d 0;\n        if (accounts.length \u003d\u003d 0) {\n            minvalue \u003d Integer.MAX_VALUE;\n        } else minvalue \u003d accounts[0];\n        for (int i \u003d0; i\u003caccounts.length; i++) {\n            if (accounts[i]\u003cminvalue) {\n                minvalue \u003d accounts[i];\n            }\n        }\n        return minvalue;\n    }\n}","10.97.20.62":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n    public static int richest(int[] accounts) {\n        // find the richest\n      int max \u003d Integer.MIN_VALUE;\n      for(int i: accounts){\n        System.out.print(\"account \u003d \" + i + \"\\n\");\n        if(i \u003e max) max \u003d i;\n      } \n      System.out.print(\"max \u003d \" + max + \"\\n\");\n      return max;\n    }\n\n    public static int poorest(int[] accounts) {\n        // find the poorest\n            int min \u003d Integer.MAX_VALUE;\n      for(int i: accounts){\n        System.out.print(\"account \u003d \" + i + \"\\n\");\n        if(i \u003c min) min \u003d i;\n      } \n      System.out.print(\"min \u003d \" + min + \"\\n\");\n      return min;\n    }\n}","10.97.20.135":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n    public static int richest(int[] accounts) {\n        int max \u003d Integer.MIN_VALUE;\n        for (int i \u003d 0; i \u003c accounts.length; i++){\n          if (accounts[i] \u003e max) {\n            max \u003d accounts[i];\n          }   \n         }\n         return max;\n    }\n\n    public static int poorest(int[] accounts) {\n        int min \u003d Integer.MAX_VALUE;\n        for (int i \u003d 0; i \u003c accounts.length; i++){\n          if (accounts[i] \u003c min) {\n            min \u003d accounts[i];\n          }   \n         }\n         return min;\n    }\n}","10.97.20.139":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n  public static int richest(int[] accounts) {\n\n        int reachestAcc \u003d Integer.MIN_VALUE;\n        for (int i \u003d 0; i \u003c accounts.length; i++) {\n\n            if (accounts[i] \u003e reachestAcc) {\n                reachestAcc \u003d accounts[i];\n            }\n           \n        }\n        \n        System.out.println(reachestAcc + \" is the reachest\");\n        return reachestAcc;\n    }\n\n    public static int poorest(int[] accounts) {\n        \n\n        int poorestAcc \u003d Integer.MAX_VALUE;\n\n        for (int i \u003d 0; i \u003c accounts.length; i++) {\n\n            if (accounts[i] \u003c poorestAcc) {\n                poorestAcc \u003d accounts[i];\n            }\n        }\n        \n        System.out.println(poorestAcc + \" is the poorest\");\n        return poorestAcc;\n    }\n}","10.97.24.17":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n  public static int richest(int[] accounts) {\n    int richest \u003d Integer.MIN_VALUE;\n    // find the richest\n    for (int current: accounts){\n      richest \u003d current \u003e richest ? current : richest;\n    }\n    System.out.println(\"richest \u003d \" + richest);\n    return richest;\n  }\n\n  public static int poorest(int[] accounts) {\n    int poorest \u003d Integer.MAX_VALUE;\n    for (int current: accounts){\n      poorest \u003d current \u003c poorest ? current : poorest;\n    }\n    // find the poorest\n    System.out.println(\"poorest \u003d \" + poorest);\n    return poorest;\n  }\n}","10.97.24.22":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n    public static int richest(int[] accounts) {\n      if (accounts.length \u003d\u003d 0)\n        return Integer.MIN_VALUE;\n      int indexMax \u003d 0;\n      for (int i \u003d 0; i \u003c accounts.length; i++) {\n        if (accounts[i] \u003e accounts[indexMax]) {\n         indexMax \u003d i;\n        }\n      }\n      return accounts[indexMax];\n    }  \n\n    public static int poorest(int[] accounts) {\n       if (accounts.length \u003d\u003d 0)\n        return Integer.MAX_VALUE;\n         int indexMin \u003d 0;\n      for (int i \u003d 0; i \u003c accounts.length; i++) {\n        if (accounts[i] \u003c accounts[indexMin]) {\n        indexMin \u003d i;\n       }\n       \n    }\n       return accounts[indexMin];\n    }\n}","10.97.20.10":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n    public static int richest(int[] accounts) {\n        int richest \u003d Integer.MIN_VALUE;\n        for (int i\u003d0; i\u003caccounts.length; i++) {\n            if (richest\u003caccounts[i]){\n              richest \u003d accounts[i];\n            }          \n        }\n        System.out.println(richest);\n        return richest;\n    }\n\n    public static int poorest(int[] accounts) {\n        int poorest \u003d Integer.MAX_VALUE;\n        for (int i\u003d0; i\u003caccounts.length; i++) {\n            if (accounts[i]\u003cpoorest){  \n              \tpoorest \u003d accounts[i];\n              }\n        }\n        System.out.println(poorest);\n        return poorest;\n    }\n}"},"jc_2":{"127.0.0.1":"package ale.java_training.classes;\n\npublic class FightClub {\n\t\n\tpublic static String declareWinner(Fighter f1, Fighter f2, String firstAttacker) {\n\t\tswitch (Double.compare(Math.ceil(f2.getHealth()*1.0/f1.getDPA()), Math.ceil(f1.getHealth()*1.0/f2.getDPA()))) {\n\t\t\tcase -1: return f1.getName();\n\t\t\tcase 0: return firstAttacker;\n\t\t\tcase 1: return f2.getName();\n\t\t}\n\t\treturn null;\n\t}\n\t\n}\n"},"jb_6":{"10.97.20.79":"package ale.java_training;\nimport java.util.Random;\n\npublic class HackUtils {\n    \n    public static String makeStronger(String password) {\n      int maxNumber \u003d 10;\n      \n      if (password.length()\u003e0){\n        char firstChar \u003d password.charAt(0);\n        firstChar \u003d Character.toUpperCase(firstChar);\n        password \u003d firstChar + password.substring(1);\n      }\n        \n      Random random \u003d new Random();\n      int randomNumber \u003d random.nextInt(maxNumber);\n      password +\u003d randomNumber;\n      \n      return password;\n    }\n}","10.97.24.20":"package ale.java_training;\n\nimport java.util.Random;\n\npublic class HackUtils {\n    \n    public static String makeStronger(String password) {\n      if (!password.isEmpty()) {\n        password \u003d password.substring(0,1).toUpperCase() + password.substring(1);\n      }\n      return password + new Random().nextInt(10);\n    }\n}\n","10.97.20.62":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static String makeStronger(String password) {\n      // qwerty -\u003e Qwerty9\n        if (password.length() \u003e 0){\n            password \u003d password.substring(0,1).toUpperCase() + password.substring(1);\n        }\n      \n        java.util.Random random \u003d new java.util.Random();\t\t\n      \treturn password + random.nextInt(10);\n    }\n}\n","10.97.24.17":"package ale.java_training;\nimport java.util.Random;\n\npublic class HackUtils {\n    \n    public static String makeStronger(String password) {\n      // qwerty -\u003e Qwerty9\n    final String s;\n    Random random;\n    random \u003d new Random();\n    if (password \u003d\u003d \"\"){\n      System.out.println(\"ERROR: password is empty\");\n      return \"\" + random.nextInt(9);\n    }\n    s \u003d password.substring(0, 1).toUpperCase() + password.substring(1) + random.nextInt(9);\n    System.out.println(\"password \u003d \" + s);\n    return s;\n    }\n}\n","10.97.20.129":"package ale.java_training;\nimport java.util.Random;\n\npublic class HackUtils {\n    \n    public static String makeStronger(String password) {\n        Random r \u003d new Random();\n        String NewPass \u003d new String();\n        if (password.length()!\u003d 0) {\n          char bigfLetter \u003d Character.toUpperCase(password.charAt(0));\n          String oldPass \u003d password.substring(1);\n          NewPass \u003d bigfLetter + oldPass;\n        }\n        int i \u003d r.nextInt(10);\n        String num \u003d Integer.toString(i);\n        NewPass +\u003d num;\n        return NewPass;\n    }\n}\n","10.97.20.135":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static String makeStronger(String password) {\n      Integer n \u003d (int) (Math.random() * 10);\n      if (password \u003d\u003d null || password \u003d\u003d \"\")\n        {return (n.toString());}\n        else {\n          return (Character.toUpperCase(password.charAt(0)) + password.substring(1) + n);}\n    }\n}\n","10.97.20.139":"package ale.java_training;\nimport java.util.Random;\npublic class HackUtils {\n    \n    public static String makeStronger(String password) {\n            // qwerty -\u003e Qwerty9\n\n            if (password \u003d\u003d null ) {\n\n                System.out.println(\"your password is empty, enter any symbol\");\n                return password;\n\n            }\n\n            //get random value\n            final Random randValue \u003d new Random();\n            int newEndsymb \u003d  randValue.nextInt();\n\n            //uint\n            if (newEndsymb \u003c\u003d0) {\n                newEndsymb \u003d newEndsymb *(-1);\n            }\n\n            //get first digit of random value\n            String firstRD \u003d Integer.toString(newEndsymb).substring(0, 1);\n\n            Random r \u003d new Random();\n            int newpwd \u003d 0;\n            String newPwd \u003d \"\";\n\n            if (password.isEmpty())\n            {\n\n\n                newpwd \u003d r.nextInt(9);\n                newPwd \u003d Integer.toString(newpwd);\n                \n                System.out.println(\"your new pwd is \" + newPwd);\n                return newPwd;\n\n            }\n\n\n            for (int i\u003d0;i\u003cpassword.length();i++)\n            {\n                if (password.charAt(i)\u003d\u003d\u0027 \u0027) {\n\n                    System.out.println(\"one of symbol is missed, try again\");\n                    return password;\n                }\n            }\n\n            // verify that first symbol is not a digit\n            String preCheckFirstSymb \u003d password.substring(0,1);\n\n                if (preCheckFirstSymb.matches(\"[-+]?\\\\d+\")) {\n                    System.out.println(\"first symbol is not a chararacter, try again\");\n                    return password;\n                }\n\n\n\n            String strongPwd \u003d password.substring(0, 1).toUpperCase() + password.substring(1) + firstRD;\n\n             System.out.println(\"Your pwd is \" + strongPwd);\n             return strongPwd;\n\n\n\n\n        }\n}\n","10.97.24.22":"package ale.java_training;\nimport java.util.Random;\npublic class HackUtils {\n    \n    public static String makeStronger(String password) {\n      // qwerty -\u003e Qwerty9\n      Random randomGenerator \u003d new Random();\n      Integer iLast \u003d randomGenerator.nextInt(9);\n      String last \u003d iLast.toString();\n      if (password !\u003d \"\") { \n      String first \u003d password.substring(0, 1).toUpperCase();\n      String second \u003d first.concat(password.substring(1));\n      return second.concat(last);\n      }\n     return last;\n    }\n}\n"},"jc_5":{"127.0.0.1":"package ale.java_training.classes;\n\npublic class Ghost implements Armored {\n  private final Shell shell;\n  \n  public Ghost() {\n    shell \u003d Shell.values()[(int)(Math.random() * Shell.values().length)];\n  }\n  \n  @Override\n  public Shell getShell() {\n    return shell;\n  }\n\t\t\n}\n"},"jb_5":{"0:0:0:0:0:0:0:1":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int profitOf(int[] accounts, int n) {\n      int max \u003d Integer.MIN_VALUE;\n      for (int i \u003d 0; i \u003c accounts.length - n + 1; i++) {\n        int sum \u003d 0;\n        for (int j \u003d i; j \u003c i + n; j++) {\n          sum +\u003d accounts[j];\n        }\n        if (sum \u003e max) {\n          max \u003d sum;\n        }\n      }\n      return max;\n    }\n}","10.97.24.20":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int profitOf(int[] accounts, int n) {\n      int max \u003d Integer.MIN_VALUE;\n      int sum \u003d 0;\n      for (int i \u003d 0; i \u003c accounts.length; i++) {\n        sum +\u003d accounts[i];\n        if (i \u003e\u003d n) {\n          sum -\u003d accounts[i-n];\n        }\n        max \u003d (sum \u003e max) \u0026\u0026 (i \u003e\u003d n-1) ? sum : max;\n      }\n      return max;\n    }\n}","10.97.20.79":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int profitOf(int[] accounts, int n) {\n        int sum \u003d Integer.MIN_VALUE;\n        for (int i \u003d 0; i \u003c\u003d accounts.length-n; i++){\n            int sumLocal \u003d 0;\n            for (int j \u003d i; j \u003c i+n; j++){\n                sumLocal +\u003d accounts[j];\n            }\n\n            sum \u003d sumLocal \u003e sum ? sumLocal : sum;\n        }\n        return sum;\n    }\n}","10.97.20.62":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int profitOf(int[] accounts, int n) {\n      // find maximum sum of n series\n      int max \u003d Integer.MIN_VALUE;\n      for(int i \u003d 0; i \u003c\u003d accounts.length - n; ++i){\n        int sum \u003d 0;\n        for(int j \u003d 0; j \u003c n; ++j){\n          sum +\u003d accounts[i+j];\n        }\n        if(sum \u003e max) max \u003d sum;\n      }\n      return max;\n    }\n}","10.97.20.129":"package ale.java_training;\n\npublic class HackUtils {\n    \n     public static int profitOf(int[] accounts, int n) {\n        int length \u003d accounts.length;\n        int[] AccountsSer \u003d new int[length];\n        int Sum \u003d 0;\n        int maxvalue \u003d 0;\n        if (length\u003cn) {\n            n\u003dlength;\n            System.out.println(\"Number of series were decreased to \"+n);\n        }\n        for (int j\u003d0; j\u003clength; j++) {\n            AccountsSer[j] \u003d 0;\n        }\n        for (int i\u003d0; i\u003clength-(n-1); i++) {\n            for (int k\u003di; k\u003ci+n; k++) {\n                Sum \u003d Sum+accounts[k];\n            }\n            AccountsSer[i] \u003d Sum;\n            System.out.println(AccountsSer[i]);\n            Sum \u003d 0;\n        }\n        maxvalue \u003d AccountsSer[0];\n        for (int h\u003d0; h\u003cAccountsSer.length; h++) {\n            if (maxvalue\u003cAccountsSer[h]) {\n                maxvalue \u003d AccountsSer[h];\n            }\n        }\n        return maxvalue;\n        }\n}","10.97.20.135":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int profitOf(int[] accounts, int n) {\n      int sum \u003d 0;\n      if (n \u003d\u003d 0){return sum;}\n          else{\n              sum \u003d Integer.MIN_VALUE;\n              for (int i \u003d 0; i \u003c\u003d accounts.length - n; i++){\n                int h_sum \u003d 0;\n                for (int j \u003d 0; j \u003c n; j++){\n                  h_sum +\u003d accounts[j+i];\n                }\n                if (h_sum \u003e sum) {sum \u003d h_sum;}\n              }  \n              return sum;\n            }\n         }\n    \n}","10.97.24.17":"package ale.java_training;\n\npublic class HackUtils {\n  public static int profitOf(int[] accounts, int n) {\n    // find maximum sum of n series\n    int max \u003d Integer.MIN_VALUE;\n    int sum;\n    int int_n[] \u003d new int[accounts.length - n + 1];\n    for (int i \u003d 0; i \u003c accounts.length - n + 1; i++){\n      sum \u003d accounts[i];\n      for (int j \u003d i+1; j \u003c i + n; j++){\n        sum \u003d sum + accounts[j];\n      }\n      int_n[i]\u003dsum;\n    }\n    for (int current: int_n){\n      max \u003d current \u003e max ? current : max;\n    }\n    System.out.println(\"max \u003d \" + max);\n    return max;\n  }\n}","10.97.24.22":"package ale.java_training;\npublic class HackUtils {\n    public static int profitOf(int[] accounts, int n) {\n      // find maximum sum of n series\n      int result \u003d 0; \n      for (int i \u003d 0; i \u003c\u003d accounts.length-n ; i++) {\n        int sum \u003d 0;\n        for (int j \u003d i; j \u003c n + i; j++) {\n        sum +\u003d accounts[j];\n      }\n        if (sum \u003e result)\n         result \u003d sum;\n     }\n    return result;\n }\n}"},"jc_4":{"127.0.0.1":"package ale.java_training.classes;\n\npublic interface Anonymizer {\n\t\n\tString pretend();\n\t\n\tstatic Anonymizer pretendAs(String somebody) {\n\t\treturn new Anonymizer() {\n          @Override\n          public String pretend() {\n            return somebody;\n          }\n        };\n\t}\n\t\n}\n"}}