{"jc_7":{"0:0:0:0:0:0:0:1":"package ale.java_training.classes;\n\nimport java.util.Arrays;\n\npublic class FancyRobot implements Robot {\n\t\n\tprivate Command[] commands \u003d new Command[0];\n\t\n\tpublic static enum Movement {\n\t\tLEFT(\"\u003c-- d[(0)(0)]b\"),\n        RIGHT(\"d[(0)(0)]b --\u003e\"),\n        DOWN(\"/[(0)(0)]\\\\\"),\n        UP(\"\\\\[(0)(0)]/\");\n             \n        private final String move;\n      \n      \tMovement(String move) {\n          this.move \u003d move;\n        }\n      \n\t}\n  \n \t@Override\n    public void queueCommand(Command command) {\n        commands \u003d Arrays.copyOf(this.commands, commands.length + 1);\n        commands[commands.length - 1] \u003d command;\n    }\n\n    @Override\n    public void execute() {\n      for (Command cmd : commands) {\n      \tcmd.doIt();\n      }\n      commands \u003d new Command[0];\n    }\n  \n  \t@Override\n    public void execute(int n) {\n      for (int i \u003d 0; i \u003c n \u0026\u0026 i \u003c commands.length; i++) {\n        commands[i].doIt();\n      }\n      commands \u003d Arrays.copyOfRange(this.commands, Math.min(n, commands.length), commands.length);\n    }\n\t\n\tpublic static class Commands {\n\t\tpublic static Command sing(String song) {\n          return new Command() {\n            @Override\n            public void doIt() {\n            \tSystem.out.println(song);\n          \t}\n          };\n        }\n      \n      \tpublic static Command dance(Movement movement) {\n          return sing(movement.move);\n        }\n      \n      \tpublic static Command work() {\n          return sing(\"Ja tvoi rabotnik\");\n        }\n      \n      \tpublic static Command serve() {\n          return sing(\"Ja tvoi sluga\");\n        }\n      \n\t}\n}"},"jb_2":{"0:0:0:0:0:0:0:1":"package ale.java_training;\nimport java.util.Random;\n\npublic class LogShuffler {\n\n     public static void shuffle(String... logs) {\n        int j \u003d 0;\n        String helper \u003d new String();\n        for (int i \u003d 1; i \u003c logs.length; i++){\n         Random random \u003d new Random();\n         j \u003d random.nextInt(i);\n         helper \u003d logs[i];\n         logs[i] \u003d logs[j];\n         logs[j] \u003d helper;\n         }\n    }\n\n}\n"},"jc_1":{"127.0.0.1":"package ale.java_training.classes;\n\npublic interface Named {\n\t\n\tString getName();\n\t\n\tpublic static Named create(String name) {\n\t\treturn new SimpleNamed(name);\n\t}\n\t\n\tpublic static class SimpleNamed implements Named {\n\t\tprivate final String name;\n      \t\n        public SimpleNamed(String name) {\n          this.name \u003d name;\n        }\n      \n        @Override\n        public String getName() {\n          return name;\n        }\n\t}\n\t\n}\n","0:0:0:0:0:0:0:1":"package ale.java_training.classes;\n\npublic interface Named {\n\t\n\tString getName();\n\t\n\tpublic static Named create(String name) {\n\t\treturn new SimpleNamed(name);\n\t}\n\t\n\tpublic static class SimpleNamed implements Named {\n\t\tprivate final String name;\n      \t\n        public SimpleNamed(String name) {\n          this.name \u003d name;\n        }\n      \n        @Override\n        public String getName() {\n          return name;\n        }\n\t}\n\t\n}\n"},"jb_1":{"0:0:0:0:0:0:0:1":"package ale.java_training;\n\nimport java.util.Arrays;\n\npublic class HackUtils {\n    \n    public static int countHackable(Boolean[] hackable) {\n        int count \u003d 0 ;\n      for (boolean hackObj:hackable){\n        if (hackObj) {\n          count+\u003d1;\n        }\n    }\n      System.out.println(Arrays.toString(hackable));\n      return count;\n    }\n}"},"jc_3":{"127.0.0.1":"package ale.java_training.classes;\npublic class T1000 extends T800 {\n  \n  public T1000() {\n    smile \u003d false;\n  }\n  \n  @Override\n  public void setSmile(boolean smile) {\n  }\n  \n}\n","0:0:0:0:0:0:0:1":"package ale.java_training.classes;\npublic class T1000 extends T800 {\n  \n  public T1000() {\n    smile \u003d false;\n  }\n  \n  @Override\n  public void setSmile(boolean smile) {\n  }\n  \n  public T1000 restore() {\n    return this;\n  }\n  \n}\n"},"jb_3":{"0:0:0:0:0:0:0:1":"package ale.java_training;\n\npublic class AccountSearcher {\n    \n        public static int richest(int[] accounts) {\n        int richest \u003d Integer.MIN_VALUE;\n        int temp \u003d Integer.MIN_VALUE;\n        for (int i\u003d0; i\u003caccounts.length; i++) {\n            if (accounts[i]\u003caccounts[0]){\n                temp \u003d accounts[0];\n            }\n            else {\n                temp \u003d accounts[i];\n            }\n        }\n        if (richest\u003ctemp){\n            richest \u003d temp;\n        }\n        System.out.println(richest);\n        return richest;\n    }\n\n\n        public static int poorest(int[] accounts) {\n        int poorest \u003d Integer.MAX_VALUE;\n        int temp \u003d Integer.MAX_VALUE;\n        for (int i\u003d0; i\u003caccounts.length; i++) {\n            if (accounts[i]\u003caccounts[0]){\n                temp \u003d accounts[i];\n            }\n            else {\n                temp \u003d accounts[0];\n            }\n        }\n        if (poorest\u003etemp){\n            poorest \u003d temp;\n        }\n        System.out.println(poorest);\n        return poorest;\n    }\n\n}"},"jc_2":{"127.0.0.1":"package ale.java_training.classes;\n\npublic class Fighter {\n\t\n\tpublic static String declareWinner(Fighter f1, Fighter f2, String firstAttacker) {\n\t\tswitch (Double.compare(Math.ceil(f2.getHealth()*1.0/f1.getDPA()), Math.ceil(f1.getHealth()*1.0/f2.getDPA()))) {\n\t\t\tcase -1: return f1.getName();\n\t\t\tcase 0: return firstAttacker;\n\t\t\tcase 1: return f2.getName();\n\t\t}\n\t\treturn null;\n\t}\n\t\n\tprivate final String name;\n\tprivate final int health, damagePerAttack;\n\t\n\tpublic Fighter(String name, int health, int damagePerAttack) {\n\t\tthis.name \u003d name;\n\t\tthis.health \u003d health;\n\t\tthis.damagePerAttack \u003d damagePerAttack;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\tpublic int getHealth() {\n\t\treturn health;\n\t}\n\t\n\tpublic int getDPA() {\n\t\treturn damagePerAttack;\n\t}\n\t\n}\n","0:0:0:0:0:0:0:1":"package ale.java_training.classes;\n\npublic class Fighter {\n\t\n\tpublic static String declareWinner(Fighter f1, Fighter f2, String firstAttacker) {\n\t\tswitch (Double.compare(Math.ceil(f2.getHealth()*1.0/f1.getDPA()), Math.ceil(f1.getHealth()*1.0/f2.getDPA()))) {\n\t\t\tcase -1: return f1.getName();\n\t\t\tcase 0: return firstAttacker;\n\t\t\tcase 1: return f2.getName();\n\t\t}\n\t\treturn null;\n\t}\n\t\n\tprivate final String name;\n\tprivate final int health, damagePerAttack;\n\t\n\tpublic Fighter(String name, int health, int damagePerAttack) {\n\t\tthis.name \u003d name;\n\t\tthis.health \u003d health;\n\t\tthis.damagePerAttack \u003d damagePerAttack;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\tpublic int getHealth() {\n\t\treturn health;\n\t}\n\t\n\tpublic int getDPA() {\n\t\treturn damagePerAttack;\n\t}\n\t\n}\n"},"jb_6":{"0:0:0:0:0:0:0:1":"package ale.java_training;\n\nimport java.util.Random;\n\npublic class HackUtils {\n\n      public static String makeStronger(String password) {\n      Integer n \u003d (int) (Math.random() * 10);\n      if (password \u003d\u003d null || password \u003d\u003d \"\")\n        {return (n.toString());}\n        else {\n          return (Character.toUpperCase(password.charAt(0)) + password.substring(1) + n);}\n    }\n\n}\n"},"jc_5":{"0:0:0:0:0:0:0:1":"package ale.java_training.classes;\n\npublic class Ghost implements Armored {\n  private final Shell shell;\n  \n  public Ghost() {\n    shell \u003d Shell.values()[(int)(Math.random() * Shell.values().length)];\n  }\n  \n  @Override\n  public Shell getShell() {\n    return shell;\n  }\n\t\t\n}\n"},"jb_5":{"0:0:0:0:0:0:0:1":"package ale.java_training;\n\npublic class HackUtils {\n    \n    public static int profitOf(int[] accounts, int n) {\n      int max \u003d Integer.MIN_VALUE;\n      for (int i \u003d 0; i \u003c accounts.length - n + 1; i++) {\n        int sum \u003d 0;\n        for (int j \u003d i; j \u003c i + n; j++) {\n          sum +\u003d accounts[j];\n        }\n        if (sum \u003e max) {\n          max \u003d sum;\n        }\n      }\n      return max;\n    }\n}"},"jc_4":{"0:0:0:0:0:0:0:1":"package ale.java_training.classes;\n\npublic interface Anonymizer {\n\t\n\tString pretend();\n\t\n\tstatic Anonymizer pretendAs(String somebody) {\n\t\treturn new Anonymizer() {\n          @Override\n          public String pretend() {\n            return somebody;\n          }\n        };\n\t}\n\t\n}\n"}}